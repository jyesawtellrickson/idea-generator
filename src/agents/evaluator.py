from langchain_ollama import ChatOllama
from langchain.prompts import ChatPromptTemplate
from langgraph.prebuilt import create_react_agent

from langgraph.types import Command
from langchain_core.messages import HumanMessage, AIMessage


def gen_evaluator_agent(args, tools):

    prompt_template = ChatPromptTemplate.from_messages(
        [
            (
                "system",
                "You are reviewing the research ideas generated by an LLM."
                " Please provide feedback on the ideas by utilising your"
                " Research Idea Grading Framework (RIGF)."
                " You should return a score for each Impact, Novelty and"
                " Feasibility on a scale of 1-5, clearly stating the reasons."
                " Be critical, don't be overly positive or wordy."
                " You can use the tools available to aid in your review.",
            ),
            ("placeholder", "{conversation}"),
        ]
    )

    llm = ChatOllama(model=args.model)
    agent = create_react_agent(llm, tools=tools)  # , state_modifier=make_system_prompt())

    def chatbot(state):
        """
        Chatbot for evaluating ideas.
        Will score a list of research ideas based on a defined criteria.
        Useful to understand if ideas generated by generate_agent are good.
        """
        # print("\n\nGENERATOR INPUT")
        # print(state)
        try:
            prompt = prompt_template.invoke(
                {"conversation": state["messages"][-5:], "ideas": state.get("ideas", [])}
            )
            state = agent.invoke(prompt)
            # print("\n\nGENERATER STATE", state)
            # update = state
            update = {
                "messages": [
                    AIMessage(content=state["messages"][-1].content, name="evaluator_agent")
                ],
            }
        except Exception as e:
            ideas = []
            update = {"messages": state["messages"] + [f"Error: {e}"], "ideas": ideas}
            print("\n\nERROR", e)

        return Command(
            update=update,
            goto="control_agent",  # "chat_agent",
        )

    return chatbot


def score_idea_with_llm(idea: dict, model_name="gpt-4"):
    """
    Uses an LLM to score an idea based on defined criteria.
    """
    prompt = f"""
    Evaluate the following idea on a scale of 1-10 for:
    - Impact: Potential significance in advancing knowledge or solving problems.
    - Novelty: Degree of innovation or uniqueness.
    - Feasibility: Practicality of implementation.

    Idea:
    Title: {idea.get('title', 'No title')}
    Abstract: {idea.get('abstract', 'No abstract')}

    Provide scores and a brief justification for each criterion.
    """
    model = ChatOllama(model=model_name)
    response = model.chat(prompt)
    # Parse response to extract scores
    return response
